% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nll.FD.fn.R
\name{nll.FD.fn}
\alias{nll.FD.fn}
\title{Negative log likelihood when fitting the frequency-dependent transmission function}
\usage{
nll.FD.fn(pars, datasets = data, initial.inf = initial.I,
  initial.sus = initial.S, n = samp.sizes, popsizes = pops,
  time.outs = time.out, time.samps = time.samp)
}
\arguments{
\item{pars}{named numeric vector. log(B) and log(gamma) in a vector, must be named - usually passed from optim()}

\item{initial.inf}{vector of initial number of infected individuals in each population}

\item{initial.sus}{vector of initial number of infected individuals in each population, which should be pops - initial.S}

\item{n}{vector of sample sizes, in number of individuals, that were sampled to estimate prevalence at each time point}

\item{popsizes}{vector of total population sizes in each population, which should be initial.S + initial.I}

\item{time.outs}{a single value indicating how many time units (e.g., 21 days days) the ODE should be simulated for - should be as long as largest time.samp}

\item{time.samps}{vector of the times when the populations were sampled, such as 0, 7, 14, and 21 days}
}
\description{
'nll.FD.fn' returns the negative log likelihood (nll) from fitting a frequency-dependent transmission function
with given parameters to a prevalence dataset. It calculates the nll for one population/epidemic
at a time, and later the loop adds and minimizes the total nll.
}
\details{
You can use this function on it's own, but it is meant to have optim pass it
parameters during the optimization procedure.
}
\examples{
#startpar = c(beta = log(0.05), gamma = log(0.05))
#initial.I<-c(1,2,5,10,15,20)
#pops<-c(100, 200, 500, 1000, 1500, 2000)
#initial.S<-pops-initial.I
#time.out <- seq(0,150,by = 1) ##for simulating data from ODEs - output same with 0.1 step
#time.samp <- seq(0,133, by = 7) ##will sample 20 time points
#samp.sizes <- rep(100, length(time.samp)) ##sample 100 indiv each time
#nll.FD.fn(pars=startpar, initial.inf = initial.I,initial.sus = initial.S,n = samp.sizes,datasets = data,popsizes = pops,time.outs = time.out,time.samps = time.samp)
}
